
whenever user tries to navigate to the URL which is not there, application throws an error.
So in order to handle such invalid URL's we need to make use of the Wild Card Routes.

So with the help of Wild card route we can navigate the user to the Default Component when user enter the invalid URL.

Steps:
1.Create a default component to navigate when invalid URL is entered
  ng g c inavlid  <--->

2.Add wild card Route
  in app.routing.module.ts

  import { InvalidComponent } from './invalid/invalid.component';

  const routes: Routes = [
      { path: "departments", component: DepartmentComponent },
      { path: "employees", component: EmployeeListComponent },
      { path: "**", component: InvalidComponent }     <----->  (Wild card routing)
];

export const routingComponents = [DepartmentComponent, EmployeeListComponent, InvalidComponent];

***IMP***
Wild card route should be the last object/router in the configuration because the router tries to match the path from the top
So if if the wild card route is at the top so it get match with any URL and it will display the invalid Component.

Problem with Wild Card Routing:
-When we navigate to the "localhost/4200"  it will considered as invalid url.Because it does not matches any of the Configureed
    roures. So it will display the invalid component. So the application needs the default route.

    So we can configure the default route of the application like below:

    in app.routing.module.ts
    { path: "", component: DepartmentComponent },

    So this will make the departmentList component as the default component
    But the appropriate solution will be to redirect the application to the existing Component.
    For this purpose we need to make use of the redirect to property.

      { path: "", redirectTo: './departments', pathMatch: 'prefix' },

      pathMatch : This property tells the  router that how to match the url segments with the configured routes.

            pathMatch: 'prefix'  --> This means if the path is prefix then redirect to the departments route.
                                      In this case it applies like : "If the prefix path is empty then redirect to the departments route.".

           pathMatch: 'full'  --> This means that redirect if the full URl is empty.

